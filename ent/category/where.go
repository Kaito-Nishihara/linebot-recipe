// Code generated by ent, DO NOT EDIT.

package category

import (
	"line-bot-app/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Category {
	return predicate.Category(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Category {
	return predicate.Category(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Category {
	return predicate.Category(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Category {
	return predicate.Category(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Category {
	return predicate.Category(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Category {
	return predicate.Category(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Category {
	return predicate.Category(sql.FieldLTE(FieldID, id))
}

// CategoryId applies equality check predicate on the "categoryId" field. It's identical to CategoryIdEQ.
func CategoryId(v string) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldCategoryId, v))
}

// CategoryName applies equality check predicate on the "categoryName" field. It's identical to CategoryNameEQ.
func CategoryName(v string) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldCategoryName, v))
}

// CategoryUrl applies equality check predicate on the "categoryUrl" field. It's identical to CategoryUrlEQ.
func CategoryUrl(v string) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldCategoryUrl, v))
}

// CategoryIdEQ applies the EQ predicate on the "categoryId" field.
func CategoryIdEQ(v string) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldCategoryId, v))
}

// CategoryIdNEQ applies the NEQ predicate on the "categoryId" field.
func CategoryIdNEQ(v string) predicate.Category {
	return predicate.Category(sql.FieldNEQ(FieldCategoryId, v))
}

// CategoryIdIn applies the In predicate on the "categoryId" field.
func CategoryIdIn(vs ...string) predicate.Category {
	return predicate.Category(sql.FieldIn(FieldCategoryId, vs...))
}

// CategoryIdNotIn applies the NotIn predicate on the "categoryId" field.
func CategoryIdNotIn(vs ...string) predicate.Category {
	return predicate.Category(sql.FieldNotIn(FieldCategoryId, vs...))
}

// CategoryIdGT applies the GT predicate on the "categoryId" field.
func CategoryIdGT(v string) predicate.Category {
	return predicate.Category(sql.FieldGT(FieldCategoryId, v))
}

// CategoryIdGTE applies the GTE predicate on the "categoryId" field.
func CategoryIdGTE(v string) predicate.Category {
	return predicate.Category(sql.FieldGTE(FieldCategoryId, v))
}

// CategoryIdLT applies the LT predicate on the "categoryId" field.
func CategoryIdLT(v string) predicate.Category {
	return predicate.Category(sql.FieldLT(FieldCategoryId, v))
}

// CategoryIdLTE applies the LTE predicate on the "categoryId" field.
func CategoryIdLTE(v string) predicate.Category {
	return predicate.Category(sql.FieldLTE(FieldCategoryId, v))
}

// CategoryIdContains applies the Contains predicate on the "categoryId" field.
func CategoryIdContains(v string) predicate.Category {
	return predicate.Category(sql.FieldContains(FieldCategoryId, v))
}

// CategoryIdHasPrefix applies the HasPrefix predicate on the "categoryId" field.
func CategoryIdHasPrefix(v string) predicate.Category {
	return predicate.Category(sql.FieldHasPrefix(FieldCategoryId, v))
}

// CategoryIdHasSuffix applies the HasSuffix predicate on the "categoryId" field.
func CategoryIdHasSuffix(v string) predicate.Category {
	return predicate.Category(sql.FieldHasSuffix(FieldCategoryId, v))
}

// CategoryIdEqualFold applies the EqualFold predicate on the "categoryId" field.
func CategoryIdEqualFold(v string) predicate.Category {
	return predicate.Category(sql.FieldEqualFold(FieldCategoryId, v))
}

// CategoryIdContainsFold applies the ContainsFold predicate on the "categoryId" field.
func CategoryIdContainsFold(v string) predicate.Category {
	return predicate.Category(sql.FieldContainsFold(FieldCategoryId, v))
}

// CategoryNameEQ applies the EQ predicate on the "categoryName" field.
func CategoryNameEQ(v string) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldCategoryName, v))
}

// CategoryNameNEQ applies the NEQ predicate on the "categoryName" field.
func CategoryNameNEQ(v string) predicate.Category {
	return predicate.Category(sql.FieldNEQ(FieldCategoryName, v))
}

// CategoryNameIn applies the In predicate on the "categoryName" field.
func CategoryNameIn(vs ...string) predicate.Category {
	return predicate.Category(sql.FieldIn(FieldCategoryName, vs...))
}

// CategoryNameNotIn applies the NotIn predicate on the "categoryName" field.
func CategoryNameNotIn(vs ...string) predicate.Category {
	return predicate.Category(sql.FieldNotIn(FieldCategoryName, vs...))
}

// CategoryNameGT applies the GT predicate on the "categoryName" field.
func CategoryNameGT(v string) predicate.Category {
	return predicate.Category(sql.FieldGT(FieldCategoryName, v))
}

// CategoryNameGTE applies the GTE predicate on the "categoryName" field.
func CategoryNameGTE(v string) predicate.Category {
	return predicate.Category(sql.FieldGTE(FieldCategoryName, v))
}

// CategoryNameLT applies the LT predicate on the "categoryName" field.
func CategoryNameLT(v string) predicate.Category {
	return predicate.Category(sql.FieldLT(FieldCategoryName, v))
}

// CategoryNameLTE applies the LTE predicate on the "categoryName" field.
func CategoryNameLTE(v string) predicate.Category {
	return predicate.Category(sql.FieldLTE(FieldCategoryName, v))
}

// CategoryNameContains applies the Contains predicate on the "categoryName" field.
func CategoryNameContains(v string) predicate.Category {
	return predicate.Category(sql.FieldContains(FieldCategoryName, v))
}

// CategoryNameHasPrefix applies the HasPrefix predicate on the "categoryName" field.
func CategoryNameHasPrefix(v string) predicate.Category {
	return predicate.Category(sql.FieldHasPrefix(FieldCategoryName, v))
}

// CategoryNameHasSuffix applies the HasSuffix predicate on the "categoryName" field.
func CategoryNameHasSuffix(v string) predicate.Category {
	return predicate.Category(sql.FieldHasSuffix(FieldCategoryName, v))
}

// CategoryNameEqualFold applies the EqualFold predicate on the "categoryName" field.
func CategoryNameEqualFold(v string) predicate.Category {
	return predicate.Category(sql.FieldEqualFold(FieldCategoryName, v))
}

// CategoryNameContainsFold applies the ContainsFold predicate on the "categoryName" field.
func CategoryNameContainsFold(v string) predicate.Category {
	return predicate.Category(sql.FieldContainsFold(FieldCategoryName, v))
}

// CategoryUrlEQ applies the EQ predicate on the "categoryUrl" field.
func CategoryUrlEQ(v string) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldCategoryUrl, v))
}

// CategoryUrlNEQ applies the NEQ predicate on the "categoryUrl" field.
func CategoryUrlNEQ(v string) predicate.Category {
	return predicate.Category(sql.FieldNEQ(FieldCategoryUrl, v))
}

// CategoryUrlIn applies the In predicate on the "categoryUrl" field.
func CategoryUrlIn(vs ...string) predicate.Category {
	return predicate.Category(sql.FieldIn(FieldCategoryUrl, vs...))
}

// CategoryUrlNotIn applies the NotIn predicate on the "categoryUrl" field.
func CategoryUrlNotIn(vs ...string) predicate.Category {
	return predicate.Category(sql.FieldNotIn(FieldCategoryUrl, vs...))
}

// CategoryUrlGT applies the GT predicate on the "categoryUrl" field.
func CategoryUrlGT(v string) predicate.Category {
	return predicate.Category(sql.FieldGT(FieldCategoryUrl, v))
}

// CategoryUrlGTE applies the GTE predicate on the "categoryUrl" field.
func CategoryUrlGTE(v string) predicate.Category {
	return predicate.Category(sql.FieldGTE(FieldCategoryUrl, v))
}

// CategoryUrlLT applies the LT predicate on the "categoryUrl" field.
func CategoryUrlLT(v string) predicate.Category {
	return predicate.Category(sql.FieldLT(FieldCategoryUrl, v))
}

// CategoryUrlLTE applies the LTE predicate on the "categoryUrl" field.
func CategoryUrlLTE(v string) predicate.Category {
	return predicate.Category(sql.FieldLTE(FieldCategoryUrl, v))
}

// CategoryUrlContains applies the Contains predicate on the "categoryUrl" field.
func CategoryUrlContains(v string) predicate.Category {
	return predicate.Category(sql.FieldContains(FieldCategoryUrl, v))
}

// CategoryUrlHasPrefix applies the HasPrefix predicate on the "categoryUrl" field.
func CategoryUrlHasPrefix(v string) predicate.Category {
	return predicate.Category(sql.FieldHasPrefix(FieldCategoryUrl, v))
}

// CategoryUrlHasSuffix applies the HasSuffix predicate on the "categoryUrl" field.
func CategoryUrlHasSuffix(v string) predicate.Category {
	return predicate.Category(sql.FieldHasSuffix(FieldCategoryUrl, v))
}

// CategoryUrlEqualFold applies the EqualFold predicate on the "categoryUrl" field.
func CategoryUrlEqualFold(v string) predicate.Category {
	return predicate.Category(sql.FieldEqualFold(FieldCategoryUrl, v))
}

// CategoryUrlContainsFold applies the ContainsFold predicate on the "categoryUrl" field.
func CategoryUrlContainsFold(v string) predicate.Category {
	return predicate.Category(sql.FieldContainsFold(FieldCategoryUrl, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Category) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Category) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Category) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		p(s.Not())
	})
}
