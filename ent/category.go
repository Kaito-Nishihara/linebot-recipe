// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"line-bot-app/ent/category"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Category is the model entity for the Category schema.
type Category struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CategoryId holds the value of the "categoryId" field.
	CategoryId string `json:"categoryId,omitempty"`
	// CategoryName holds the value of the "categoryName" field.
	CategoryName string `json:"categoryName,omitempty"`
	// CategoryUrl holds the value of the "categoryUrl" field.
	CategoryUrl string `json:"categoryUrl,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Category) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case category.FieldID:
			values[i] = new(sql.NullInt64)
		case category.FieldCategoryId, category.FieldCategoryName, category.FieldCategoryUrl:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Category", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Category fields.
func (c *Category) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case category.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case category.FieldCategoryId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field categoryId", values[i])
			} else if value.Valid {
				c.CategoryId = value.String
			}
		case category.FieldCategoryName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field categoryName", values[i])
			} else if value.Valid {
				c.CategoryName = value.String
			}
		case category.FieldCategoryUrl:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field categoryUrl", values[i])
			} else if value.Valid {
				c.CategoryUrl = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Category.
// Note that you need to call Category.Unwrap() before calling this method if this Category
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Category) Update() *CategoryUpdateOne {
	return NewCategoryClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Category entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Category) Unwrap() *Category {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Category is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Category) String() string {
	var builder strings.Builder
	builder.WriteString("Category(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("categoryId=")
	builder.WriteString(c.CategoryId)
	builder.WriteString(", ")
	builder.WriteString("categoryName=")
	builder.WriteString(c.CategoryName)
	builder.WriteString(", ")
	builder.WriteString("categoryUrl=")
	builder.WriteString(c.CategoryUrl)
	builder.WriteByte(')')
	return builder.String()
}

// Categories is a parsable slice of Category.
type Categories []*Category
